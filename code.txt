import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from streamlit_lottie import st_lottie
import requests

@st.cache_data
def load_lottie_url(url: str):
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    return None

st.set_page_config(
    page_title="YouTube Trending Analytics",
    page_icon="📊",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Custom CSS (same as before, omitted here for brevity, keep yours)

# Sidebar: Upload + Filters
with st.sidebar:
    st.title("🔎 Upload & Filters")
    uploaded_file = st.file_uploader("Upload YouTube Trending CSV", type=["csv"])
    st.markdown("---")
    st.write("Adjust filters after upload.")

    # Declare these outside the main if-block for scope clarity
    selected = None
    dr = None
    vr = None

    # We'll set filters after upload, so placeholders here

# Main content
st.title("📈 YouTube Trending Analytics Dashboard")

# Animation and subtitle
lottie_url = "https://assets2.lottiefiles.com/packages/lf20_j1adxtyb.json"
lottie_json = load_lottie_url(lottie_url)
if lottie_json:
    st_lottie(lottie_json, height=150)
st.markdown('<div class="creator-text">Your One Step Solution by ABHIRUP</div>', unsafe_allow_html=True)
st.markdown("Dive into YouTube trending insights with a **dark premium UI** and **subtle animations**.")

if uploaded_file:
    df = pd.read_csv(uploaded_file, encoding='latin1')
    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

    # Parse dates and remove timezone info if any
    for col in ['trending_date', 'publish_time']:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
            if df[col].dt.tz is not None:
                df[col] = df[col].dt.tz_localize(None)

    # Now the filters go inside sidebar AFTER upload is available:
    with st.sidebar:
        # Channel filter
        if 'channel_title' in df.columns:
            channels = df['channel_title'].dropna().unique().tolist()
            selected = st.multiselect("Select Channels", sorted(channels), default=sorted(channels)[:5])
            df = df[df['channel_title'].isin(selected)]

        # Date range filter
        for col in ['trending_date', 'publish_time']:
            if col in df.columns:
                min_d, max_d = df[col].min(), df[col].max()
                dr = st.date_input(col.replace('_',' ').title(), (min_d, max_d), min_value=min_d, max_value=max_d)
                df = df[(df[col] >= pd.to_datetime(dr[0])) & (df[col] <= pd.to_datetime(dr[1]))]
                break

        # Views filter
        view_col = next((c for c in ['view_count','views'] if c in df.columns), None)
        if view_col:
            vmin, vmax = int(df[view_col].min()), int(df[view_col].max())
            vr = st.slider("Filter by Views Range", vmin, vmax, (vmin, vmax), step=max(1,(vmax-vmin)//100))
            df = df[(df[view_col] >= vr[0]) & (df[view_col] <= vr[1])]

    # Palette
    palette = sns.color_palette(["#66fcf1","#45a29e","#c5c6c7","#1f2833","#0b0c10"])

    # Display Dataset Preview
    st.subheader("🧾 Dataset Preview")
    st.dataframe(df.head())

    # Top Channels plot
    st.markdown("---")
    st.subheader("🏆 Top 10 Trending Channels")
    if 'channel_title' in df.columns:
        top = df['channel_title'].value_counts().head(10)
        fig, ax = plt.subplots(figsize=(6,4))
        sns.barplot(x=top.values, y=top.index, palette=palette, ax=ax)
        ax.set_xlabel("Number of Videos", color="#000000")
        ax.set_ylabel("Channel", color="#000000")
        ax.set_title("Top Channels", color="#000000")
        ax.tick_params(colors="#000000")
        st.pyplot(fig, clear_figure=True)
    else:
        st.info("No channel data available.")

    # Top Categories plot
    st.markdown("---")
    st.subheader("📂 Top Video Categories")
    cat_col = next((c for c in ['category','category_id'] if c in df.columns), None)
    if cat_col:
        cats = df[cat_col].value_counts().head(10)
        fig2, ax2 = plt.subplots(figsize=(6,4))
        sns.barplot(x=cats.values, y=cats.index, palette=palette, ax=ax2)
        ax2.set_xlabel("Number of Videos", color="#000000")
        ax2.set_ylabel("Category", color="#000000")
        ax2.set_title("Top Categories", color="#000000")
        ax2.tick_params(colors="#e0e0e0")
        st.pyplot(fig2, clear_figure=True)
    else:
        st.info("No category data available.")

    # Views Distribution plot
    st.markdown("---")
    st.subheader("📊 Views Distribution")
    if view_col:
        fig3, ax3 = plt.subplots(figsize=(6,4))
        sns.histplot(df[view_col], bins=40, kde=True, color='#45a29e', ax=ax3)
        ax3.set_xlabel("Views", color="#000000")
        ax3.set_ylabel("Count", color="#000000")
        ax3.set_title("Views Distribution", color="#000000")
        ax3.tick_params(colors="#000000")
        st.pyplot(fig3, clear_figure=True)
    else:
        st.info("No view data available.")

    # Correlation Heatmap
    st.markdown("---")
    st.subheader("🔗 Correlation Heatmap")
    nums = df.select_dtypes(include='number').columns
    if len(nums) > 1:
        corr = df[nums].corr()
        fig4, ax4 = plt.subplots(figsize=(6,5))
        sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm', ax=ax4, cbar_kws={'shrink':.8})
        ax4.set_title("Correlation Matrix", color="#000000")
        st.pyplot(fig4, clear_figure=True)
    else:
        st.info("Not enough numeric data for correlation.")

    # Likes vs Dislikes Scatter
    st.markdown("---")
    st.subheader("👍 Likes vs 👎 Dislikes Scatter")
    like_col = next((c for c in ['like_count','likes'] if c in df.columns), None)
    dislike_col = next((c for c in ['dislike_count','dislikes'] if c in df.columns), None)
    if like_col and dislike_col:
        fig5, ax5 = plt.subplots(figsize=(6,4))
        sns.scatterplot(
            data=df,
            x=like_col,
            y=dislike_col,
            hue='channel_title' if 'channel_title' in df.columns else None,
            palette=palette,
            ax=ax5,
            alpha=0.7,
            edgecolor=None,
        )
        ax5.set_xlabel("Likes", color="#000000")
        ax5.set_ylabel("Dislikes", color="#000000")
        ax5.set_title("Likes vs Dislikes", color="#e0e0e0")
        ax5.tick_params(colors="#000000")
        if 'channel_title' in df.columns:
            ax5.legend(bbox_to_anchor=(1.05,1), loc=2, frameon=True, facecolor='#1f1f1f')
        st.pyplot(fig5, clear_figure=True)
    else:
        st.info("Likes/Dislikes data not available.")

    # Download button
    st.markdown("---")
    st.caption("Dashboard powered by Streamlit, Seaborn & pandas")
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("💾 Download CSV", data=csv, file_name='filtered.csv', mime='text/csv')

else:
    st.info("📥 Upload your YouTube trending CSV to begin.")





    python -m streamlit run main.py
