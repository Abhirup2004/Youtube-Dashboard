import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from streamlit_lottie import st_lottie
import requests
from wordcloud import WordCloud, STOPWORDS

@st.cache_data
def load_lottie_url(url: str):
    r = requests.get(url)
    if r.status_code == 200:
        return r.json()
    return None

st.set_page_config(
    page_title="YouTube Trending Analytics",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
)

with st.sidebar:
    st.title("üîé Upload & Filters")
    uploaded_file = st.file_uploader("Upload YouTube Trending CSV", type=["csv"])
    st.markdown("---")
    st.write("Adjust filters after upload.")

    selected = None
    dr = None
    vr = None

st.title("üìà YouTube Trending Analytics Dashboard")

lottie_url = "https://assets2.lottiefiles.com/packages/lf20_j1adxtyb.json"
lottie_json = load_lottie_url(lottie_url)
if lottie_json:
    st_lottie(lottie_json, height=150)
st.markdown('<div class="creator-text">Your One Step Solution by ABHIRUP</div>', unsafe_allow_html=True)
st.markdown("Dive into YouTube trending insights with a **dark premium UI** and **subtle animations**.")

if uploaded_file:
    df = pd.read_csv(uploaded_file, encoding='latin1')
    df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_')

    for col in ['trending_date', 'publish_time']:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
            if df[col].dt.tz is not None:
                df[col] = df[col].dt.tz_localize(None)

    with st.sidebar:
        if 'channel_title' in df.columns:
            channels = df['channel_title'].dropna().unique().tolist()
            selected = st.multiselect("Select Channels", sorted(channels), default=sorted(channels)[:5])
            df = df[df['channel_title'].isin(selected)]

        for col in ['trending_date', 'publish_time']:
            if col in df.columns:
                min_d, max_d = df[col].min(), df[col].max()
                dr = st.date_input(col.replace('_',' ').title(), (min_d, max_d), min_value=min_d, max_value=max_d)
                df = df[(df[col] >= pd.to_datetime(dr[0])) & (df[col] <= pd.to_datetime(dr[1]))]
                break

        view_col = next((c for c in ['view_count','views'] if c in df.columns), None)
        if view_col:
            vmin, vmax = int(df[view_col].min()), int(df[view_col].max())
            vr = st.slider("Filter by Views Range", vmin, vmax, (vmin, vmax), step=max(1,(vmax-vmin)//100))
            df = df[(df[view_col] >= vr[0]) & (df[view_col] <= vr[1])]

    palette = sns.color_palette(["#66fcf1","#45a29e","#c5c6c7","#1f2833","#0b0c10"])

    st.subheader("üßæ Dataset Preview")
    st.dataframe(df.head())

    st.markdown("---")
    st.subheader("üèÜ Top 10 Trending Channels")
    if 'channel_title' in df.columns:
        top = df['channel_title'].value_counts().head(10)
        fig, ax = plt.subplots(figsize=(6,4))
        sns.barplot(x=top.values, y=top.index, palette=palette, ax=ax)
        ax.set_xlabel("Number of Videos", color="#000000")
        ax.set_ylabel("Channel", color="#000000")
        ax.set_title("Top Channels", color="#000000")
        ax.tick_params(colors="#000000")
        st.pyplot(fig, clear_figure=True)
    else:
        st.info("No channel data available.")

    st.markdown("---")
    st.subheader("üìÇ Top Video Categories")
    cat_col = next((c for c in ['category','category_id'] if c in df.columns), None)
    if cat_col:
        cats = df[cat_col].value_counts().head(10)
        fig2, ax2 = plt.subplots(figsize=(6,4))
        sns.barplot(x=cats.values, y=cats.index, palette=palette, ax=ax2)
        ax2.set_xlabel("Number of Videos", color="#000000")
        ax2.set_ylabel("Category", color="#000000")
        ax2.set_title("Top Categories", color="#000000")
        ax2.tick_params(colors="#e0e0e0")
        st.pyplot(fig2, clear_figure=True)
    else:
        st.info("No category data available.")

    st.markdown("---")
    st.subheader("üìä Views Distribution")
    if view_col:
        fig3, ax3 = plt.subplots(figsize=(6,4))
        sns.histplot(df[view_col], bins=40, kde=True, color='#45a29e', ax=ax3)
        ax3.set_xlabel("Views", color="#000000")
        ax3.set_ylabel("Count", color="#000000")
        ax3.set_title("Views Distribution", color="#000000")
        ax3.tick_params(colors="#000000")
        st.pyplot(fig3, clear_figure=True)
    else:
        st.info("No view data available.")

    st.markdown("---")
    st.subheader("üîó Correlation Heatmap")
    nums = df.select_dtypes(include='number').columns
    if len(nums) > 1:
        corr = df[nums].corr()
        fig4, ax4 = plt.subplots(figsize=(6,5))
        sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm', ax=ax4, cbar_kws={'shrink':.8})
        ax4.set_title("Correlation Matrix", color="#000000")
        st.pyplot(fig4, clear_figure=True)
    else:
        st.info("Not enough numeric data for correlation.")

    st.markdown("---")
    st.subheader("üëç Likes vs üëé Dislikes Scatter")
    like_col = next((c for c in ['like_count','likes'] if c in df.columns), None)
    dislike_col = next((c for c in ['dislike_count','dislikes'] if c in df.columns), None)
    if like_col and dislike_col:
        fig5, ax5 = plt.subplots(figsize=(6,4))
        sns.scatterplot(
            data=df,
            x=like_col,
            y=dislike_col,
            hue='channel_title' if 'channel_title' in df.columns else None,
            palette=palette,
            ax=ax5,
            alpha=0.7,
            edgecolor=None,
        )
        ax5.set_xlabel("Likes", color="#000000")
        ax5.set_ylabel("Dislikes", color="#000000")
        ax5.set_title("Likes vs Dislikes", color="#e0e0e0")
        ax5.tick_params(colors="#000000")
        if 'channel_title' in df.columns:
            ax5.legend(bbox_to_anchor=(1.05,1), loc=2, frameon=True, facecolor='#1f1f1f')
        st.pyplot(fig5, clear_figure=True)
    else:
        st.info("Likes/Dislikes data not available.")

    st.markdown("---")
    st.subheader("‚òÅÔ∏è Word Cloud of Trending Video Titles")
    if 'title' in df.columns:
        text = " ".join(title for title in df['title'].dropna().astype(str))
        stopwords = set(STOPWORDS)
        wordcloud = WordCloud(stopwords=stopwords, background_color="black", width=800, height=400, colormap='cool').generate(text)
        fig_wc, ax_wc = plt.subplots(figsize=(10, 5))
        ax_wc.imshow(wordcloud, interpolation='bilinear')
        ax_wc.axis("off")
        st.pyplot(fig_wc)
    else:
        st.info("No title data available for word cloud.")

    st.markdown("---")
    st.subheader("üìä Engagement Rate Histogram")
    comment_col = next((c for c in ['comment_count','comments'] if c in df.columns), None)
    if like_col and comment_col and view_col:
        df['engagement_rate'] = (df[like_col] + df[comment_col]) / df[view_col].replace(0, 1)
        fig_engage, ax_engage = plt.subplots(figsize=(6,4))
        sns.histplot(df['engagement_rate'], bins=40, kde=True, color='#66fcf1', ax=ax_engage)
        ax_engage.set_title("Engagement Rate Distribution", color="#000000")
        ax_engage.set_xlabel("Engagement Rate", color="#000000")
        ax_engage.set_ylabel("Video Count", color="#000000")
        ax_engage.tick_params(colors="#000000")
        st.pyplot(fig_engage)
    else:
        st.info("Likes, Comments or Views data not available for engagement analysis.")

    st.markdown("---")
    st.subheader("üîµ Views vs Likes Bubble Chart")
    if like_col and comment_col and view_col:
        fig_bubble, ax_bubble = plt.subplots(figsize=(6, 4))
        scatter = ax_bubble.scatter(
            df[view_col], 
            df[like_col], 
            s=df[comment_col] / 50, 
            c='#45a29e', 
            alpha=0.6, 
            edgecolors='w'
        )
        ax_bubble.set_xlabel("Views", color="#000000")
        ax_bubble.set_ylabel("Likes", color="#000000")
        ax_bubble.set_title("Views vs Likes (Bubble = Comments)", color="#000000")
        ax_bubble.tick_params(colors="#000000")
        st.pyplot(fig_bubble)
    else:
        st.info("Insufficient data for bubble chart.")

    st.markdown("---")
    st.caption("Dashboard powered by Streamlit, Seaborn & pandas")
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("üíæ Download CSV", data=csv, file_name='filtered.csv', mime='text/csv')

else:
    st.info("üì• Upload your YouTube trending CSV to begin.")
